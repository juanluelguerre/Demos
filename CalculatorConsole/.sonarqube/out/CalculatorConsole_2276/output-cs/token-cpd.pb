Ð

>C:\dev\Demos\CalculatorConsole\CalculatorConsole\Calculator.cs
	namespace 	
ElGuerre
 
. 
Demos 
. 
CalculartorConsole +
{ 
public 

class 

Calculator 
{		 
public 
int 
Sum 
( 
int 
a 
, 
int !
b" #
)# $
{ 	
return 
a 
+ 
b 
; 
} 	
public 
int 
Divide 
( 
int 
a 
,  
int! $
b% &
)& '
{ 	
if 
( 
a 
< 
b 
) 
throw   
new   %
InvalidOperationException   3
(  3 4
)  4 5
;  5 6
if"" 
("" 
a"" 
<="" 
$num"" 
)"" 
return## 
$num## 
;## 
if%% 
(%% 
b%% 
==%% 
$num%% 
)%% 
return&& 
a&& 
;&& 
return)) 
a)) 
/)) 
b)) 
;)) 
}** 	
}++ 
},, «
DC:\dev\Demos\CalculatorConsole\CalculatorConsole\ArgumentsOptions.cs
	namespace 	
ElGuerre
 
. 
Demos 
. 
CalculatorConsole *
{ 
public 

enum 
OperationType 
{ 
suma 
, 
divide		 
}

 
public 

class 
ArgumentsOptions !
{ 
[ 	
Option	 
( 
$char 
, 
$str 
, 
Required #
=$ %
true& *
,* +
HelpText 
= 
$str :
): ;
]; <
public 
OperationType 
	Operacion &
{' (
get) ,
;, -
set. 1
;1 2
}3 4
[ 	
ValueOption	 
( 
$num 
) 
] 
public 
int 
Value1 
{ 
get 
;  
set! $
;$ %
}& '
[ 	
ValueOption	 
( 
$num 
) 
] 
public 
int 
Value2 
{ 
get 
;  
set! $
;$ %
}& '
[ 	
ParserState	 
] 
public 
IParserState 
LastParserState +
{, -
get. 1
;1 2
set3 6
;6 7
}8 9
[ 	

HelpOption	 
] 
public 
string 
GetUsage 
( 
)  
{   	
return!! 
HelpText!! 
.!! 
	AutoBuild!! %
(!!% &
this!!& *
,!!* +
("" 
HelpText"" 
current"" 
)""  
=>""! #
HelpText""$ ,
."", -'
DefaultParsingErrorsHandler""- H
(""H I
this""I M
,""M N
current""O V
)""V W
)""W X
;""X Y
}## 	
}$$ 
}%% ì
;C:\dev\Demos\CalculatorConsole\CalculatorConsole\Program.cs
	namespace 	
ElGuerre
 
. 
Demos 
. 
CalculatorConsole *
{ 
public 

static 
class 
Program 
{ 
public 
static 
void 
Main 
(  
string  &
[& '
]' (
args) -
)- .
{		 	
var

 
options

 
=

 
new

 
ArgumentsOptions

 .
(

. /
)

/ 0
;

0 1
var 
isValid 
= 
CommandLine %
.% &
Parser& ,
., -
Default- 4
.4 5
ParseArguments5 C
(C D
argsD H
,H I
optionsJ Q
)Q R
;R S
if 
( 
isValid 
) 
{ 
var 
c 
= 
new 

Calculator &
(& '
)' (
;( )
double 
result 
= 
$num  !
;! "
switch 
( 
options 
.  
	Operacion  )
)) *
{ 
case 
OperationType &
.& '
suma' +
:+ ,
result 
=  
c! "
." #
Sum# &
(& '
options' .
.. /
Value1/ 5
,5 6
options7 >
.> ?
Value2? E
)E F
;F G
break 
; 
case 
OperationType &
.& '
divide' -
:- .
result 
=  
c! "
." #
Divide# )
() *
options* 1
.1 2
Value12 8
,8 9
options: A
.A B
Value2B H
)H I
;I J
break 
; 
default 
: 
break 
; 
} 
Console 
. 
	WriteLine !
(! "
$"" $ 
Resultado esperado: $ 8
{8 9
result9 ?
}? @
"@ A
)A B
;B C
Console 
. 
	WriteLine !
(! "
)" #
;# $
c   
.   
Divide   
(   
$num   
,   
$num   
)   
;   
Console!! 
.!! 
	WriteLine!! !
(!!! "
)!!" #
;!!# $
Console## 
.## 
	WriteLine## !
(##! "
$str##" A
)##A B
;##B C
Console$$ 
.$$ 
ReadLine$$  
($$  !
)$$! "
;$$" #
}%% 
}&& 	
}'' 
}(( ö
KC:\dev\Demos\CalculatorConsole\CalculatorConsole\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str &
)& '
]' (
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str (
)( )
]) *
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *